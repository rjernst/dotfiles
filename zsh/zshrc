
ZDOTDIR=$HOME/.zsh
DOTFILES=$HOME/.dotfiles
export EDITOR=/usr/bin/vim

if [[ $OSTYPE == darwin* ]]; then
  export PATH=/opt/homebrew/bin:$PATH
fi

#----------------------------------------------------------------------------
#                           ssh auth from gpg
#----------------------------------------------------------------------------
# This must be before p10k instant prompt, so that it can connect to stdin
if [[ $SSH_AUTH_SOCK == /tmp/* ]]; then
  # Fix SSH auth socket location so agent forwarding works with tmux
  ln -sf $SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
  export SSH_AUTH_SOCK
else
  # connect ssh agent to gpg for key retrieval
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  gpg-connect-agent updatestartuptty /bye >/dev/null
fi
export GPG_TTY=$TTY

#----------------------------------------------------------------------------
#                      powerlevel10k instant prompt
#----------------------------------------------------------------------------
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#----------------------------------------------------------------------------
#                                 zinit
#----------------------------------------------------------------------------
### Added by Zinit's installer
if [[ ! -f $ZDOTDIR/zinit/bin/zinit.zsh ]]; then
  print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
  command mkdir -p "$ZDOTDIR/zinit" && command chmod g-rwX "$ZDOTDIR/zinit"
  command git clone https://github.com/zdharma/zinit "$ZDOTDIR/zinit/bin" && \
      print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
      print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

declare -A ZINIT
ZINIT[HOME_DIR]=$ZDOTDIR/zinit
ZINIT[ZCOMPDUMP_PATH]=$ZDOTDIR/var/zcompdump

source "$ZDOTDIR/zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk


#----------------------------------------------------------------------------
#                              powerlevel10k
#----------------------------------------------------------------------------
source $ZDOTDIR/p10k.zsh
zinit ice depth=1
zinit light romkatv/powerlevel10k

#----------------------------------------------------------------------------
#                                 colors
#----------------------------------------------------------------------------
# turn on colors in both output, and completions
export CLICOLOR=1
zinit ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light trapd00r/LS_COLORS

#----------------------------------------------------------------------------
#                                 completions
#----------------------------------------------------------------------------

zinit wait lucid for \
  atinit"zicompinit -; zicdreplay" \
      zdharma/fast-syntax-highlighting \
      OMZP::colored-man-pages \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions

#----------------------------------------------------------------------------
#                                   history 
#----------------------------------------------------------------------------

# don't let history files pollute homedir
# disable less history so it doesn't write .lesshst
export LESSHISTSIZE=0
HISTFILE=$HOME/.zsh/var/history

# save a lot of history!
HISTSIZE=10000
SAVEHIST=10000
setopt hist_expire_dups_first
setopt hist_ignore_space

# share history across terminals
setopt inc_append_history

# don't pollute history
setopt hist_ignore_dups

# allow editing of line after selecting history
setopt hist_verify

# shortcuts
alias h='history'
alias hs='history | grep -i'

#----------------------------------------------------------------------------
#                               input line
#----------------------------------------------------------------------------

# allow comments so scripts can be pasted as is
setopt interactivecomments

# cursor movement
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

#----------------------------------------------------------------------------
#                                    git
#----------------------------------------------------------------------------
zinit wait lucid for \
      OMZL::git.zsh \
  atload"unalias grv" \
      OMZP::git

#zinit ice wait'1' atload'zinc_optional_depenency_loaded'
#zinit load romkatv/gitstatus

#----------------------------------------------------------------------------
#                                  gradle 
#----------------------------------------------------------------------------
# where gradle looks for gradle.properties
export GRADLE_USER_HOME=$HOME/.gradle
# helper for running gradlew from any dir
alias gw='$DOTFILES/bin/gradlew.sh'

#----------------------------------------------------------------------------
#                                  python
#----------------------------------------------------------------------------

alias py3='python3'

for plugin in $ZDOTDIR/plugins/*.zsh; do
  source $plugin
done

#----------------------------------------------------------------------------
#                               basic shortcuts
#----------------------------------------------------------------------------
alias cdd='cd $DOTFILES'
[[ $OSTYPE == linux* ]] && alias ls='ls --group-directories-first'
alias ll='ls -l'
alias rm='rm -i'       # always ask before removing a file
alias mv='mv -i'       # always ask before moving a file onto another file
alias cp='cp -i'       # always ask before copying a file onto another file
alias grep='grep --color=auto'
alias vm='vagrant'
alias yubikey-enable='ykman config usb --enable otp'
alias yubikey-disable='ykman config usb --disable otp'

#----------------------------------------------------------------------------
#                             dotfiles management
#----------------------------------------------------------------------------
alias reload-config='echo "Reloading $HOME/.zshrc"; source $HOME/.zshrc'
alias cdd='cd $DOTFILES'
if [[ $OSTYPE == darwin* ]]; then
  function _reload_prefs() {
    echo "Running scripts in $DOTFILES/macos/prefs"
    for file in $DOTFILES/macos/prefs/*.sh; do
      echo "$(basename $file)"
      zsh $file
    done
  }
  alias reload-prefs='_reload_prefs'

  function _reload_brewfile() {
    echo "Updating homebrew bundles from $HOME/.Brewfile"
    brew bundle --global install 

    x86brewfile=~/.Brewfile-x86
    if [[ -f $x86brewfile ]]; then
      arch -x86_64 /bin/bash -c "/usr/local/bin/brew bundle --file $x86brewfile install"
    fi
  }
  alias reload-brewfile='_reload_brewfile'
  alias edit-brewfile='vim $HOME/.Brewfile'
  alias edit-brewfile-x86='vim $HOME/.Brewfile-x86'

  function _brew_x86() {
    arch -x86_64 /bin/bash -c "/usr/local/bin/brew $@"
  }
  alias brew-x86='_brew_x86'


fi

PATH=$HOME/bin:$PATH

# vi: set tabstop=2 shiftwidth=2 filetype=sh expandtab:
