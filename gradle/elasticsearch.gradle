import org.gradle.util.GradleVersion

def configureGeBuildScans = { target ->
    target.buildScan.publishAlways() // comment this out if you don't want to opt-in to publishing scans
    target.buildScan.server = 'https://gradle-enterprise.elastic.co'
}

def configureDevelocityBuildScans = { target ->
    target.buildScan.publishing.onlyIf { true } // comment this out if you don't want to opt-in to publishing scans
    target.server = 'https://gradle-enterprise.elastic.co'
}

rootProject {
    project.pluginManager.withPlugin('com.gradle.build-scan') {
        configureGeBuildScans(rootProject)
    } 
}

gradle.settingsEvaluated { settings ->
    settings.buildCache {
        remote(HttpBuildCache) {
            url = 'https://gradle-enterprise.elastic.co/cache/'
            push = false
        }
    }
    /*settings.buildCache {
        local {
            //directory = new File(rootDir, 'build-cache')
            removeUnusedEntriesAfterDays = 30
        }
    }*/
    
    // Starting with Gradle 6.0 the build scan plugin is applied in settings.gradle
    // With version 3.7 the plugin was rebranded as develocity plugin. We deal with
    // both versions here to make sure working on older branches or other non elasticsearch
    // projects that use older build scan plugin versions do not break.
    if (GradleVersion.current().compareTo(GradleVersion.version('6.0.0')) >= 0) {
      boolean devCityUsed = false
      settings.pluginManager.withPlugin('com.gradle.develocity') {
        devCityUsed = true
        configureDevelocityBuildScans(settings.develocity)
      }
      if(devCityUsed == false) {
        settings.pluginManager.withPlugin('com.gradle.enterprise') {
          configureGeBuildScans(settings.gradleEnterprise)
        }
      }
    }
}
